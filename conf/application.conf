# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret="Y=`4fTEIAnBQAZu7GrxmpQlG=4:GPSV?TRTe3vngTkF`8;:GOrYdd@YJLotVcUi1"

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# port listening to connections
http.port = ${?API_PORT}

# RabbitMQ configuration
# ~~~~~
rabbitmq.username = ${?RABBITMQ_USERNAME}
rabbitmq.password = ${?RABBITMQ_PASSWORD}
rabbitmq.host = ${?RABBITMQ_HOST}

rabbitmq.port = 5672
rabbitmq.port = ${?RABBITMQ_PORT}

rabbitmq.queue = "opendata"
rabbitmq.queue = ${?RABBITMQ_QUEUE}

rabbitmq.vhost = /opendata_vhost
rabbitmq.vhost = ${?RABBITMQ_VHOST}

rabbitmq.prefetch = 4
rabbitmq.prefetch = ${?RABBITMQ_PREFETCH}

rabbitmq.durable = true
rabbitmq.durable = ${?RABBITMQ_DURABLE}

# Database configuration
# ~~~~~

# mongodb.uri = "mongodb://username:password@localhost:27017/service_broker"
mongodb.uri = ${?MONGODB_URI}

# Storage
# ~~~~~

# Sync if true, async if false.
storage.sync = true
storage.sync = ${?STORAGE_SYNC}

# Data gathering
# ~~~~~

# File system type: local or swift
gatherer.fs = "local"
gatherer.fs = ${?GATHERER_FS}

gatherer.index_dir = "/tmp/opendata/index"
gatherer.index_dir = ${?GATHERER_INDEX_DIR}

# ~~~ (local)
local.storage = "/tmp/opendata/storage"
local.storage = ${?LOCAL_STORAGE_DIR}

local.container_dir = "opendata"
local.container_dir = ${?LOCAL_CONTAINER_DIR}

local.storage_url = "http://localhost:9000"
local.storage_url = ${?LOCAL_STORAGE_URL}

# ~~~ (swift)

# opendata or any suitable name
swift.container_name = ${?SWIFT_CONTAINER}

swift.user = ${?SWIFT_USER}

swift.password = ${?SWIFT_PASSWORD}

swift.project_id = ${?SWIFT_PROJECT_ID}

# default
swift.domain_name = ${?SWIFT_DOMAIN_NAME}

# http://keystone.example.com:5000/v3
swift.endpoint = ${?SWIFT_KEYSTONE_ENDPOINT}

# http://swift.example.com:8080/v1/AUTH_
swift.swift_endpoint = ${?SWIFT_ENDPOINT}

# Storage
# ~~~~~
storage {
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    parallelism-min = ${?STORAGE_PARALELISM_MIN}

    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 16
    parallelism-max = ${?STORAGE_PARALELISM_MAX}

    # The parallelism factor is used to determine thread pool size using the
    # following formula: ceil(available processors * factor). The resulting size
    # is then bounded by the parallelism-min and parallelism-max values.
    parallelism-factor = 2.0
    parallelism-factor = ${?STORAGE_PARALELISM_FACTOR}

    # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
    # like peeking mode which "pop".
    # Setting the peeking mode to "FIFO" (First in, First out) will make the processing of
    # peeking behave like a queue while setting the peeking mode to "LIFO" (Last in, First
    # out) will make the processing of peeking behave like a stack.
    task-peeking-mode = "FIFO"
    task-peeking-mode = ${?STORAGE_CONSUMING_ALGORITHM}
  }
}

# Searcher
# ~~~~~
searcher {
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    parallelism-min = ${?SEARCH_PARALELISM_MIN}

    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 16
    parallelism-max = ${?SEARCH_PARALELISM_MAX}

    # The parallelism factor is used to determine thread pool size using the
    # following formula: ceil(available processors * factor). Resulting size
    # is then bounded by the parallelism-min and parallelism-max values.
    parallelism-factor = 2.0
    parallelism-factor = ${?SEARCH_PARALELISM_FACTOR}

    # Setting the peeking mode to "FIFO" (First in, First out) will make the processing of
    # peeking behave like a queue while setting the peeking mode to "LIFO" (Last in, First
    # out) will make the processing of peeking behave like a stack.
    task-peeking-mode = "FIFO"
    task-peeking-mode = ${?SEARCH_CONSUMING_ALGORITHM}
  }
}
